from flask import Flask, render_template, request, jsonify
import asyncio
from advisor import TravelAdvisor

app = Flask(__name__)
advisor = TravelAdvisor()

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/ask', methods=['POST'])
def ask():
    user_input = request.json.get('message', '')
    if not user_input:
        return jsonify({'error': 'No message provided'}), 400
    
    try:
        # Run the async advisor in a sync context
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        cities_chunks, top_cities, preferences, available_tokens = loop.run_until_complete(
            advisor.process_request(user_input)
        )
        loop.close()

        if not cities_chunks:
            return jsonify({'error': 'Could not process request'}), 500

        # Format the response
        response = {
            'preferences': preferences,
            'recommendations': []
        }

        for city, score in top_cities:
            city_info = {
                'name': city,
                'score': f"{score:.3f}",
                'details': []
            }
            
            if city in cities_chunks:
                # Extract relevant information based on user preferences
                all_text = " ".join(cities_chunks[city])
                
                # Create a focused summary based on the city's features
                summary = []
                
                # Check for beach and sea information
                if '–ø–ª—è–∂' in all_text.lower() or '–º–æ—Ä–µ' in all_text.lower():
                    beach_info = "üèñÔ∏è "
                    if '–ø–µ—Å—á–∞–Ω—ã–π' in all_text.lower():
                        beach_info += "–ï—Å—Ç—å –ø–µ—Å—á–∞–Ω—ã–µ –ø–ª—è–∂–∏. "
                    if '–∫—É–ø–∞–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω' in all_text.lower():
                        for sentence in all_text.split('.'):
                            if '–∫—É–ø–∞–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω' in sentence.lower():
                                beach_info += sentence.strip() + ". "
                                break
                    summary.append(beach_info.strip())
                
                # Check for climate information
                if '–∞–≤–≥—É—Å—Ç' in all_text.lower() or '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞' in all_text.lower():
                    climate_info = "üå°Ô∏è "
                    for sentence in all_text.split('.'):
                        if '–∞–≤–≥—É—Å—Ç' in sentence.lower() and ('—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞' in sentence.lower() or '–≥—Ä–∞–¥—É—Å' in sentence.lower()):
                            climate_info += sentence.strip() + ". "
                            break
                    if not '–∞–≤–≥—É—Å—Ç' in climate_info.lower():
                        for sentence in all_text.split('.'):
                            if '–ª–µ—Ç' in sentence.lower() and '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞' in sentence.lower():
                                climate_info += sentence.strip() + ". "
                                break
                    summary.append(climate_info.strip())
                
                # Add tourist infrastructure info if available
                if '—Ç—É—Ä–∏—Å—Ç–∏' in all_text.lower():
                    for sentence in all_text.split('.'):
                        if '—Ç—É—Ä–∏—Å—Ç–∏' in sentence.lower():
                            summary.append("üè® " + sentence.strip() + ".")
                            break
                
                if summary:
                    city_info['details'] = summary
                else:
                    city_info['details'] = [f"üéØ {city} –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –≤–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞."]
            
            response['recommendations'].append(city_info)

        return jsonify(response)

    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
