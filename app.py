from flask import Flask, render_template, request, jsonify
import asyncio
from advisor import TravelAdvisor
from asgiref.sync import async_to_sync

app = Flask(__name__)
# Initialize advisor
advisor = TravelAdvisor()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/ask', methods=['POST'])
async def ask():
    try:
        query = request.json.get('message')
        if not query:
            return jsonify({'error': 'No message provided'}), 400

        # Process the query using TravelAdvisor
        cities_chunks, top_cities, preferences, available_tokens, relevant_facts = await advisor.process_request(query)
        
        if not cities_chunks:
            return jsonify({
                'preferences': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å',
                'recommendations': []
            })

        # Format preferences for display
        preferences_html = f"<h3>üìã –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞:</h3><p>{preferences}</p>"

        # Format recommendations
        recommendations = []
        for city, score in top_cities:
            details = []
            
            # Add score
            details.append(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.3f}")
            
            # Add relevant facts
            if city in relevant_facts and relevant_facts[city]:
                facts_text = "üìö –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã:"
                for fact, _ in relevant_facts[city]:
                    facts_text += f"<br>‚Ä¢ {fact}"
                details.append(facts_text)
            
            # Add climate information if available
            if city in cities_chunks:
                all_text = " ".join(cities_chunks[city])
                if '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞' in all_text.lower() or any(month in all_text.lower() for month in ['—è–Ω–≤–∞—Ä', '—Ñ–µ–≤—Ä–∞–ª', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä', '–æ–∫—Ç—è–±—Ä', '–Ω–æ—è–±—Ä', '–¥–µ–∫–∞–±—Ä']):
                    climate_info = "üå°Ô∏è "
                    for sentence in all_text.split('.'):
                        if any(month in sentence.lower() for month in ['—è–Ω–≤–∞—Ä', '—Ñ–µ–≤—Ä–∞–ª', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä', '–æ–∫—Ç—è–±—Ä', '–Ω–æ—è–±—Ä', '–¥–µ–∫–∞–±—Ä']) and ('—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞' in sentence.lower() or '–≥—Ä–∞–¥—É—Å' in sentence.lower()):
                            climate_info += sentence.strip() + ". "
                            break
                    if climate_info != "üå°Ô∏è ":
                        details.append(climate_info.strip().replace(",", "."))

            recommendations.append({
                'name': city,
                'details': details
            })

        return jsonify({
            'preferences': preferences_html,
            'recommendations': recommendations
        })

    except Exception as e:
        return jsonify({
            'preferences': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}',
            'recommendations': []
        }), 500

if __name__ == '__main__':
    app.run(debug=True)
