import asyncio
from advisor import TravelAdvisor

async def process_and_evaluate_query(advisor, query, query_description):
    print(f"\n{'='*20} –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–†–û–°: {query_description} {'='*20}")
    print(f"–ó–∞–ø—Ä–æ—Å: {query}")
    
    try:
        cities_chunks, top_cities, preferences, available_tokens = await advisor.process_request(query)
        cities_content = await advisor.wiki_service.get_all_cities_content()
        
        if not cities_chunks:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å")
            return
        
        print("\nüìã –ê–ù–ê–õ–ò–ó –ó–ê–ü–†–û–°–ê:")
        print(preferences)
        
        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–ù–´–ï –ì–û–†–û–î–ê:")
        for city, score in top_cities:
            print(f"\nüèõÔ∏è {city} (–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.3f})")
            if city in cities_chunks:
                all_text = " ".join(cities_chunks[city])
                        
                # Climate information
                if '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞' in all_text.lower() or any(month in all_text.lower() for month in ['—è–Ω–≤–∞—Ä', '—Ñ–µ–≤—Ä–∞–ª', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä', '–æ–∫—Ç—è–±—Ä', '–Ω–æ—è–±—Ä', '–¥–µ–∫–∞–±—Ä']):
                    climate_info = "üå°Ô∏è "
                    for sentence in all_text.split('.'):
                        if any(month in sentence.lower() for month in ['—è–Ω–≤–∞—Ä', '—Ñ–µ–≤—Ä–∞–ª', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä', '–æ–∫—Ç—è–±—Ä', '–Ω–æ—è–±—Ä', '–¥–µ–∫–∞–±—Ä']) and ('—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞' in sentence.lower() or '–≥—Ä–∞–¥—É—Å' in sentence.lower()):
                            climate_info += sentence.strip() + ". "
                            break
                    if not any(month in climate_info.lower() for month in ['—è–Ω–≤–∞—Ä', '—Ñ–µ–≤—Ä–∞–ª', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä', '–æ–∫—Ç—è–±—Ä', '–Ω–æ—è–±—Ä', '–¥–µ–∫–∞–±—Ä']):
                        for sentence in all_text.split('.'):
                            if '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞' in sentence.lower():
                                climate_info += sentence.strip() + ". "
                                break
                    print(climate_info.strip())
                        
                # OpenStreetMap POI information
                if city in cities_content and cities_content[city].pois:
                    pois = cities_content[city].pois
                    
                    # Beaches
                    if pois.beaches:
                        print("üèñÔ∏è –ü–ª—è–∂–∏:")
                        for beach in pois.beaches:
                            print(f"  ‚Ä¢ {beach.name}")
                    elif '–ø–ª—è–∂' in all_text.lower() or '–º–æ—Ä–µ' in all_text.lower():
                        beach_info = "üèñÔ∏è "
                        if '–ø–µ—Å—á–∞–Ω—ã–π' in all_text.lower():
                            beach_info += "–ï—Å—Ç—å –ø–µ—Å—á–∞–Ω—ã–µ –ø–ª—è–∂–∏. "
                        if '–∫—É–ø–∞–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω' in all_text.lower():
                            for sentence in all_text.split('.'):
                                if '–∫—É–ø–∞–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω' in sentence.lower():
                                    beach_info += sentence.strip() + ". "
                                    break
                        print(beach_info.strip())
                    
                    # Tourist attractions
                    if pois.tourist_attractions:
                        print("üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
                        for attraction in pois.tourist_attractions[:5]:
                            print(f"  ‚Ä¢ {attraction.name}")
                    
                    # Entertainment
                    if pois.entertainment:
                        print("üé° –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:")
                        for venue in pois.entertainment[:5]:
                            print(f"  ‚Ä¢ {venue.name}")
                    
                    # Sports facilities
                    if pois.sports_facilities:
                        print("üèÉ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:")
                        for facility in pois.sports_facilities[:5]:
                            print(f"  ‚Ä¢ {facility.name}")
                
                # Tourist infrastructure from Wikipedia
                if '—Ç—É—Ä–∏—Å—Ç–∏' in all_text.lower():
                    for sentence in all_text.split('.'):
                        if '—Ç—É—Ä–∏—Å—Ç–∏' in sentence.lower():
                            print("üè® " + sentence.strip() + ".")
                            break
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        raise

async def main():
    advisor = TravelAdvisor()
    
    test_queries = [
        ("""–•–æ—á—É –ø–æ–µ—Ö–∞—Ç—å –Ω–∞ –º–æ—Ä–µ –≤ –∞–≤–≥—É—Å—Ç–µ, —á—Ç–æ–±—ã –±—ã–ª–æ —Ç–µ–ø–ª–æ –æ–∫–æ–ª–æ 25-30 –≥—Ä–∞–¥—É—Å–æ–≤ 
            –∏ –ø–µ—Å—á–∞–Ω—ã–π –ø–ª—è–∂. –ë—é–¥–∂–µ—Ç –¥–æ 100000 —Ä—É–±–ª–µ–π.""", 
         "–ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö —Å–æ —Å—Ä–µ–¥–Ω–∏–º –±—é–¥–∂–µ—Ç–æ–º"),
        
        ("""–ò—â—É –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫—É—Ä–æ—Ä—Ç —Å —Ä–∞–∑–≤–∏—Ç–æ–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π, 
            —Å–ø–∞-—Ü–µ–Ω—Ç—Ä–∞–º–∏ –∏ –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º —Å–µ—Ä–≤–∏—Å–∞. –ë—é–¥–∂–µ—Ç –¥–æ 300000 —Ä—É–±–ª–µ–π.""",
         "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –æ—Ç–¥—ã—Ö"),
        
        ("""–ù—É–∂–µ–Ω –Ω–µ–¥–æ—Ä–æ–≥–æ–π —Å–µ–º–µ–π–Ω—ã–π –æ—Ç–¥—ã—Ö —Å –¥–µ—Ç—å–º–∏, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å –∞–∫–≤–∞–ø–∞—Ä–∫–æ–º 
            –∏–ª–∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è–º–∏ –¥–ª—è –¥–µ—Ç–µ–π. –ë—é–¥–∂–µ—Ç –¥–æ 80000 —Ä—É–±–ª–µ–π.""",
         "–°–µ–º–µ–π–Ω—ã–π –æ—Ç–¥—ã—Ö —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º"),
        
        ("""–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ—Ç–¥—ã—Ö —Å –ø–æ—Å–µ—â–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –º–µ—Å—Ç –∏ –º—É–∑–µ–µ–≤, 
            –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–µ –∂–∞—Ä—á–µ 25 –≥—Ä–∞–¥—É—Å–æ–≤. –ë—é–¥–∂–µ—Ç –¥–æ 150000 —Ä—É–±–ª–µ–π.""",
         "–ö—É–ª—å—Ç—É—Ä–Ω—ã–π —Ç—É—Ä–∏–∑–º"),
        
        ("""–•–æ—á—É –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∏–º–Ω–∏–π –æ—Ç–¥—ã—Ö –≤ –≥–æ—Ä–∞—Ö —Å –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–º–∏ —Ç—Ä–∞—Å—Å–∞–º–∏ 
            –≤ —è–Ω–≤–∞—Ä–µ. –ë—é–¥–∂–µ—Ç –¥–æ 200000 —Ä—É–±–ª–µ–π.""",
         "–ó–∏–º–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö")
    ]
    
    for i, (query, description) in enumerate(test_queries, 1):
        print(f"\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {i} –∏–∑ {len(test_queries)}")
        try:
            await process_and_evaluate_query(advisor, query, description)
            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å {i} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ {i}: {str(e)}")
            continue

if __name__ == "__main__":
    try:
        print("\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
        asyncio.run(main())
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        raise
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        raise
